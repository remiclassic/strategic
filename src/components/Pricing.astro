---
import BuyButton from './BuyButton.astro';

// Function to handle image paths
const getImagePath = (path: string) => {
	const cleanPath = path.startsWith('/') ? path.slice(1) : path;
	return import.meta.env.DEV ? `/${cleanPath}` : `/strategic/${cleanPath}`;
};

const pricingTiers = [
	{
		name: 'STARTER PACKAGE',
		id: 'starter',
		href: '#',
		price: {
			current: 17,
			set: 27,
			discount: 37
		},
		features: [
			{ text: "Don't Do Anything â€“ PDF Mini Guide", icon: 'âœ…' },
			{ text: 'Lazy Genius Blueprint â€“ Travel + Freedom Hacks', icon: 'âœ…' },
			{ text: 'Sell PDFs, Grow to $100K, Live Tax-Free â€“ Starter System', icon: 'âœ…' }
		],
		additionalInfo: [
			{ text: 'Digital delivery only', icon: 'ðŸ“¦' },
			{ text: 'Instant access, yours forever', icon: 'âš¡' },
			{ text: '30-Day Money-Back Guarantee', icon: 'ðŸ’¸' },
			{ text: 'Pick your plan, then nap.', icon: 'ðŸ˜´' }
		],
		badge: null,
		image: '/images/starterpackage.png',
		buttonText: 'GET STARTED',
		notes: 'Perfect for beginners!',
		description: 'Mini guides to help you start selling digital products the lazy way'
	},
	{
		name: 'BEST VALUE PACKAGE',
		id: 'best-value',
		href: '#',
		price: {
			current: 47,
			set: 97,
			discount: 52
		},
		features: [
			{ text: 'Everything in Smart Wealth Accelerator', icon: 'âœ…' },
			{ text: 'Legal Residence With Minimal Stays â€“ PDF Strategy', icon: 'âœ…' },
			{ text: 'Offshore Business Operations Guide â€“ Set up + scale on autopilot', icon: 'âœ…' }
		],
		additionalInfo: [
			{ text: 'Digital tools & strategy guides', icon: 'ðŸ“¦' },
			{ text: 'Instant access, self-paced', icon: 'âš¡' },
			{ text: '30-Day Money-Back Guarantee', icon: 'ðŸ’¸' }
		],
		badge: 'MOST POPULAR',
		image: '/images/bestvalue.png',
		buttonText: 'GET BEST VALUE',
		notes: 'Built for builders.',
		description: 'Everything you need to build a passive income system that runs on autopilot'
	},
	{
		name: 'SCALE TO FREEDOM PATH',
		id: 'scale-freedom',
		href: '#',
		price: {
			current: 97,
			set: 197,
			discount: 51
		},
		features: [
			{ text: 'Everything in Global Freedom Vault', icon: 'âœ…' },
			{ text: 'High-Risk Banking Solutions â€“ Smart systems for global banking', icon: 'âœ…' },
			{ text: 'Complete Freedom Blueprint â€“ Advanced step-by-step system', icon: 'âœ…' }
		],
		additionalInfo: [
			{ text: 'All digital. No calls. No coaching.', icon: 'ðŸ“¦' },
			{ text: 'Instant lifetime access', icon: 'âš¡' },
			{ text: '30-Day Money-Back Guarantee', icon: 'ðŸ’¸' }
		],
		badge: 'PREMIUM',
		image: '/images/scaletofreedom.png',
		buttonText: 'GET PREMIUM',
		notes: 'For the full-time freedom seeker.',
		description: 'For people ready to go all in on smart, global freedom'
	}
];

// Flash sale countdown timer logic
const endTime = new Date();
endTime.setHours(22, 58, 24); // Set to match the time shown in the image

// If the end time is in the past, set it to 24 hours from now
if (endTime < new Date()) {
	endTime.setDate(endTime.getDate() + 1);
}
---

<section class="relative py-24 overflow-hidden">
	<!-- Background Image -->
	<div class="absolute inset-0 z-0">
		<img 
			src={getImagePath('images/pricingbg.png')} 
			alt="Background Pattern" 
			class="w-full h-full object-cover opacity-10"
		/>
	</div>

	<!-- Content -->
	<div class="container mx-auto px-4 relative z-10">
		<div class="text-center mb-16">
			<h2 class="text-4xl md:text-5xl font-bold mb-6">Choose Your Path to Freedom</h2>
			<p class="text-xl text-gray-600 max-w-2xl mx-auto">
				Select the package that best fits your goals and start your journey to financial freedom today.
			</p>
		</div>

		<!-- Pricing Cards -->
		<div class="grid grid-cols-1 md:grid-cols-3 gap-8">
			{pricingTiers.map((tier) => (
				<div class={`bg-white rounded-lg shadow-lg p-8 transform hover:scale-105 transition-transform duration-300 ${tier.id === 'best-value' ? 'border-2 border-blue-500' : ''}`}>
					{tier.id === 'best-value' && (
						<div class="bg-blue-500 text-white text-center py-1 px-4 rounded-full text-sm font-semibold mb-4">
							Most Popular
						</div>
					)}
					<h3 class="text-2xl font-bold mb-4">{tier.name}</h3>
					<div class="text-4xl font-bold mb-6">${tier.price.current}</div>
					<ul class="space-y-4 mb-8">
						{tier.features.map((feature) => (
							<li class="flex items-center">
								<svg class="w-5 h-5 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
								</svg>
								{feature.text}
							</li>
						))}
					</ul>
					<a 
						href="#get-started" 
						class={`block text-center py-3 px-6 rounded-full font-semibold transition-colors duration-300 ${
							tier.id === 'best-value' 
								? 'bg-blue-500 text-white hover:bg-blue-600' 
								: tier.id === 'scale-freedom' ? 'bg-gray-100 text-gray-800 hover:bg-gray-200'
								: 'bg-gray-100 text-gray-800 hover:bg-gray-200'
						}`}
					>
						{tier.buttonText}
					</a>
				</div>
			))}
		</div>
	</div>
</section>

<style>
	/* Remove duplicate styles */
	.price-card,
	.popular-card,
	.mini-guide-card {
		display: none; /* These are old unused classes */
	}

	/* Keep only the new animation styles */
	.pricing-card {
		transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
		transform-style: preserve-3d;
		perspective: 1000px;
		position: relative;
	}

	.pricing-card:hover {
		transform: translateY(-8px);
		box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
	}

	.pricing-card.popular {
		animation: subtle-bounce 6s ease-in-out infinite;
	}

	.package-label {
		transition: all 0.3s ease;
	}

	.pricing-card:hover .package-label {
		transform: translateY(-2px) scale(1.05);
	}

	.sloth-image {
		transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
	}

	.pricing-card:hover .sloth-image {
		transform: scale(1.1) rotate(5deg);
	}

	.price-tag {
		transition: all 0.3s ease;
	}

	.pricing-card:hover .price-tag {
		transform: scale(1.05);
	}

	.pricing-card:hover .price-tag .current-price {
		animation: price-pop 0.3s ease-out;
	}

	.feature-item {
		transition: all 0.3s ease;
		transform-origin: left;
	}

	.pricing-card:hover .feature-item {
		transform: translateX(4px);
	}

	.feature-check {
		transition: all 0.3s ease;
	}

	.pricing-card:hover .feature-check {
		transform: scale(1.2);
		color: #22C55E;
	}

	.cta-button {
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
		position: relative;
		overflow: hidden;
	}

	.cta-button::after {
		content: '';
		position: absolute;
		top: -50%;
		left: -50%;
		width: 200%;
		height: 200%;
		background: linear-gradient(
			to right,
			rgba(255, 255, 255, 0) 0%,
			rgba(255, 255, 255, 0.3) 50%,
			rgba(255, 255, 255, 0) 100%
		);
		transform: rotate(30deg);
		animation: button-shine 3s infinite;
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	.pricing-card:hover .cta-button::after {
		opacity: 1;
	}

	.flash-sale-banner {
		animation: banner-pulse 2s infinite;
	}

	.timer-text {
		animation: timer-blink 1s infinite;
	}

	@keyframes subtle-bounce {
		0%, 100% { transform: translateY(0) scale(1.05); }
		50% { transform: translateY(-5px) scale(1.05); }
	}

	@keyframes price-pop {
		0% { transform: scale(1); }
		50% { transform: scale(1.1); }
		100% { transform: scale(1); }
	}

	@keyframes button-shine {
		0% { transform: translateX(-100%) rotate(30deg); }
		100% { transform: translateX(100%) rotate(30deg); }
	}

	@keyframes banner-pulse {
		0%, 100% { transform: scale(1); }
		50% { transform: scale(1.02); }
	}

	@keyframes timer-blink {
		0%, 100% { opacity: 1; }
		50% { opacity: 0.7; }
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		// Add 3D tilt effect to pricing cards
		const cards = document.querySelectorAll('.pricing-card');
		
		cards.forEach(card => {
			card.addEventListener('mousemove', (e) => {
				const rect = card.getBoundingClientRect();
				const x = e.clientX - rect.left;
				const y = e.clientY - rect.top;
				
				const centerX = rect.width / 2;
				const centerY = rect.height / 2;
				
				const rotateX = (y - centerY) / 20;
				const rotateY = (centerX - x) / 20;
				
				card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateY(-8px)`;
			});
			
			card.addEventListener('mouseleave', () => {
				card.style.transform = card.classList.contains('popular') ? 'scale(1.05)' : '';
			});
		});

		// Add hover effect for feature items
		const features = document.querySelectorAll('.feature-item');
		features.forEach(feature => {
			feature.addEventListener('mouseenter', () => {
				const check = feature.querySelector('.feature-check');
				if (check) {
					check.style.transform = 'scale(1.2) rotate(5deg)';
				}
			});
			
			feature.addEventListener('mouseleave', () => {
				const check = feature.querySelector('.feature-check');
				if (check) {
					check.style.transform = '';
				}
			});
		});

		// Countdown Timer Logic
		function initializeCountdown() {
			// Set end time to 24 hours from now
			const endTime = new Date();
			endTime.setHours(endTime.getHours() + 24);

			function updateTimers() {
				const now = new Date();
				const timeRemaining = Math.max(0, Math.floor((endTime - now) / 1000));

				const hours = Math.floor(timeRemaining / 3600);
				const minutes = Math.floor((timeRemaining % 3600) / 60);
				const seconds = timeRemaining % 60;

				const timeString = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;

				// Update flash sale timer
				const flashSaleTimer = document.getElementById('flash-sale-timer');
				if (flashSaleTimer) {
					flashSaleTimer.textContent = timeString;
				}

				// Update all pricing card timers
				const timerElements = document.querySelectorAll('.timer-text');
				timerElements.forEach(timer => {
					timer.textContent = `Special price ends in ${timeString}`;
				});

				if (timeRemaining <= 0) {
					clearInterval(countdownInterval);
					if (flashSaleTimer) {
						flashSaleTimer.textContent = '00:00:00';
					}
					timerElements.forEach(timer => {
						timer.textContent = 'Special price ended';
					});
				}

				return timeRemaining;
			}

			// Update immediately
			if (updateTimers() > 0) {
				// Set interval to update every second
				const countdownInterval = setInterval(() => {
					if (updateTimers() <= 0) {
						clearInterval(countdownInterval);
					}
				}, 1000);
			}
		}

		// Start the countdown
		initializeCountdown();
	});
</script> 