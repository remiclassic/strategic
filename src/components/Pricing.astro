---
import BuyButton from './BuyButton.astro';

const pricingTiers = [
	{
		name: 'STARTER PACKAGE',
		id: 'starter',
		href: '#',
		price: {
			current: 17,
			set: 27,
			discount: 37
		},
		features: [
			{ text: "Don't Do Anything ‚Äì PDF Mini Guide", icon: '‚úÖ' },
			{ text: 'Lazy Genius Blueprint ‚Äì Travel + Freedom Hacks', icon: '‚úÖ' },
			{ text: 'Sell PDFs, Grow to $100K, Live Tax-Free ‚Äì Starter System', icon: '‚úÖ' }
		],
		additionalInfo: [
			{ text: 'Digital delivery only', icon: 'üì¶' },
			{ text: 'Instant access, yours forever', icon: '‚ö°' },
			{ text: '30-Day Money-Back Guarantee', icon: 'üí∏' },
			{ text: 'Pick your plan, then nap.', icon: 'üò¥' }
		],
		badge: null,
		image: '/strategic/images/starterpackage.png',
		buttonText: 'GET STARTED',
		notes: 'Perfect for beginners!',
		description: 'Mini guides to help you start selling digital products the lazy way'
	},
	{
		name: 'BEST VALUE PACKAGE',
		id: 'best-value',
		href: '#',
		price: {
			current: 47,
			set: 97,
			discount: 52
		},
		features: [
			{ text: 'Everything in Smart Wealth Accelerator', icon: '‚úÖ' },
			{ text: 'Legal Residence With Minimal Stays ‚Äì PDF Strategy', icon: '‚úÖ' },
			{ text: 'Offshore Business Operations Guide ‚Äì Set up + scale on autopilot', icon: '‚úÖ' }
		],
		additionalInfo: [
			{ text: 'Digital tools & strategy guides', icon: 'üì¶' },
			{ text: 'Instant access, self-paced', icon: '‚ö°' },
			{ text: '30-Day Money-Back Guarantee', icon: 'üí∏' }
		],
		badge: 'MOST POPULAR',
		image: '/strategic/images/bestvalue.png',
		buttonText: 'GET BEST VALUE',
		notes: 'Built for builders.',
		description: 'Everything you need to build a passive income system that runs on autopilot'
	},
	{
		name: 'SCALE TO FREEDOM PATH',
		id: 'scale-freedom',
		href: '#',
		price: {
			current: 97,
			set: 197,
			discount: 51
		},
		features: [
			{ text: 'Everything in Global Freedom Vault', icon: '‚úÖ' },
			{ text: 'High-Risk Banking Solutions ‚Äì Smart systems for global banking', icon: '‚úÖ' },
			{ text: 'Complete Freedom Blueprint ‚Äì Advanced step-by-step system', icon: '‚úÖ' }
		],
		additionalInfo: [
			{ text: 'All digital. No calls. No coaching.', icon: 'üì¶' },
			{ text: 'Instant lifetime access', icon: '‚ö°' },
			{ text: '30-Day Money-Back Guarantee', icon: 'üí∏' }
		],
		badge: 'PREMIUM',
		image: '/strategic/images/scaletofreedom.png',
		buttonText: 'GET PREMIUM',
		notes: 'For the full-time freedom seeker.',
		description: 'For people ready to go all in on smart, global freedom'
	}
];

// Flash sale countdown timer logic
const endTime = new Date();
endTime.setHours(22, 58, 24); // Set to match the time shown in the image

// If the end time is in the past, set it to 24 hours from now
if (endTime < new Date()) {
	endTime.setDate(endTime.getDate() + 1);
}
---

<section class="relative w-full bg-[#FFD600] py-16 px-4">
	<!-- Background Pattern -->
	<div class="absolute inset-0 z-0">
		<img 
			src="/strategic/images/pricingbg.png" 
			alt="Pricing Background" 
			class="absolute inset-0 w-full h-full object-cover opacity-50"
		/>
	</div>

	<!-- Flash Sale Banner -->
	<div class="relative z-10 max-w-4xl mx-auto mb-8">
		<div class="flash-sale-banner bg-[#FF4D4D] text-white p-4 rounded-xl border-2 border-black flex items-center justify-between">
			<div class="flex items-center gap-2">
				<span class="text-2xl">üè†</span>
				<span class="font-bold">Flash Sale Ends Soon!</span>
			</div>
			<div class="font-mono font-bold" id="flash-sale-timer">22:58:24</div>
		</div>
		<p class="text-sm text-center mt-2 text-[#1B1B3D]">Save up to 50% on all packages - Limited time only!</p>
	</div>

	<!-- Section Header -->
	<div class="relative z-10 text-center mb-12">
		<h2 class="text-4xl font-black text-[#1B1B3D] mb-4">PRICING PLANS</h2>
		<p class="text-xl text-[#1B1B3D] mb-4">Choose your path to freedom with our special value packages!</p>
		<p class="text-xl text-[#1B1B3D] max-w-2xl mx-auto">
			Learn how to turn your knowledge into simple digital products that sell while you sleep.
		</p>
	</div>

	<!-- Pricing Cards Container -->
	<div class="relative z-10 max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
		{pricingTiers.map(tier => (
			<div class={`pricing-card relative bg-[#FFFDF7] rounded-2xl border-2 border-black p-6 flex flex-col ${tier.id === 'best-value' ? 'popular' : ''}`}>
				<!-- Package Label -->
				<div class={`package-label absolute -top-3 left-4 ${tier.id === 'best-value' ? 'bg-[#4D9FFF]' : 'bg-[#FFE55C]'} px-4 py-1 rounded-full border-2 border-black`}>
					<span class={`font-bold text-sm ${tier.id === 'best-value' ? 'text-white' : ''}`}>{tier.notes}</span>
				</div>

				{tier.badge && (
					<!-- Most Popular Badge -->
					<div class="absolute -bottom-3 left-1/2 transform -translate-x-1/2 bg-[#4D9FFF] px-8 py-1 rounded-full border-2 border-black whitespace-nowrap">
						<span class="font-bold text-sm text-white">{tier.badge}</span>
					</div>
				)}

				<!-- Sloth Illustration -->
				<div class="mb-6 flex justify-center">
					<img 
						src={tier.image}
						alt={`Sloth - ${tier.name}`}
						class="sloth-image w-32 h-32 object-contain"
					/>
				</div>

				<!-- Package Name -->
				<h3 class="text-xl font-black text-[#1B1B3D] mb-2">{tier.name}</h3>
				<p class="text-sm text-gray-600 mb-4">{tier.description}</p>

				<!-- Price -->
				<div class="price-tag flex items-baseline gap-1 mb-6">
					<span class="current-price text-3xl font-black">${tier.price.current}</span>
					<span class="text-sm line-through text-gray-500">${tier.price.set}</span>
					<span class="text-sm font-bold text-[#FF4D4D]">{tier.price.discount}% OFF</span>
				</div>

				<!-- Features List -->
				<ul class="space-y-4 mb-8 flex-grow">
					{tier.features.map(feature => (
						<li class="feature-item flex items-start gap-2">
							<span class="feature-check text-green-500 text-xl">{feature.icon}</span>
							<span>{feature.text}</span>
						</li>
					))}
				</ul>

				<!-- Additional Info -->
				<div class="space-y-2 text-sm mb-6">
					{tier.additionalInfo ? (
						tier.additionalInfo.map(info => (
							<div class="flex items-center gap-2">
								<span>{info.icon}</span>
								<span>{info.text}</span>
							</div>
						))
					) : (
						<>
							<div class="flex items-center gap-2">
								<span>{tier.delivery?.icon ?? 'üì¶'}</span>
								<span>{tier.delivery}</span>
							</div>
							<div class="flex items-center gap-2">
								<span>{tier.access?.icon ?? '‚ö°'}</span>
								<span>{tier.access}</span>
							</div>
							<div class="flex items-center gap-2">
								<span>{tier.guarantee?.icon ?? 'üîÑ'}</span>
								<span>{tier.guarantee}</span>
							</div>
						</>
					)}
				</div>

				<!-- Even If Statement -->
				<p class="text-sm text-gray-600 italic mb-4">Even if you have no audience, no niche, or no idea where to start.</p>

				<!-- CTA Button -->
				<button class={`cta-button w-full ${tier.id === 'best-value' ? 'bg-[#4D9FFF] hover:bg-[#3D8FEF]' : tier.id === 'scale-freedom' ? 'bg-[#FFB800] text-[#1B1B3D] hover:bg-[#FFA800]' : 'bg-[#1B1B3D] text-white hover:bg-[#2C2D5D]'} font-bold py-3 rounded-xl border-2 border-black transition-colors`}>
					{tier.buttonText}
				</button>

				<!-- Timer -->
				<p class="timer-text text-xs text-center mt-4" id={`timer-${tier.id}`}>Special price ends in 22:58:24</p>
			</div>
		))}
	</div>

	<!-- Trust Badges -->
	<div class="relative z-10 max-w-4xl mx-auto mt-16 grid grid-cols-2 md:grid-cols-4 gap-4">
		<div class="bg-[#FFFDF7] p-4 rounded-xl border-2 border-black flex items-center justify-center gap-2">
			<span class="text-2xl">üîí</span>
			<span class="font-bold text-sm">Secure Checkout</span>
		</div>
		<div class="bg-[#FFFDF7] p-4 rounded-xl border-2 border-black flex items-center justify-center gap-2">
			<span class="text-2xl">üíØ</span>
			<span class="font-bold text-sm">Love It or Get Your Money Back</span>
		</div>
		<div class="bg-[#FFFDF7] p-4 rounded-xl border-2 border-black flex items-center justify-center gap-2">
			<span class="text-2xl">üéÅ</span>
			<span class="font-bold text-sm">Keep the Bonuses Even If You Refund</span>
		</div>
		<div class="bg-[#FFFDF7] p-4 rounded-xl border-2 border-black flex items-center justify-center gap-2">
			<span class="text-2xl">üëã</span>
			<span class="font-bold text-sm">No Ongoing Support</span>
		</div>
	</div>
</section>

<style>
	/* Remove duplicate styles */
	.price-card,
	.popular-card,
	.mini-guide-card {
		display: none; /* These are old unused classes */
	}

	/* Keep only the new animation styles */
	.pricing-card {
		transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
		transform-style: preserve-3d;
		perspective: 1000px;
		position: relative;
	}

	.pricing-card:hover {
		transform: translateY(-8px);
		box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
	}

	.pricing-card.popular {
		animation: subtle-bounce 6s ease-in-out infinite;
	}

	.package-label {
		transition: all 0.3s ease;
	}

	.pricing-card:hover .package-label {
		transform: translateY(-2px) scale(1.05);
	}

	.sloth-image {
		transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
	}

	.pricing-card:hover .sloth-image {
		transform: scale(1.1) rotate(5deg);
	}

	.price-tag {
		transition: all 0.3s ease;
	}

	.pricing-card:hover .price-tag {
		transform: scale(1.05);
	}

	.pricing-card:hover .price-tag .current-price {
		animation: price-pop 0.3s ease-out;
	}

	.feature-item {
		transition: all 0.3s ease;
		transform-origin: left;
	}

	.pricing-card:hover .feature-item {
		transform: translateX(4px);
	}

	.feature-check {
		transition: all 0.3s ease;
	}

	.pricing-card:hover .feature-check {
		transform: scale(1.2);
		color: #22C55E;
	}

	.cta-button {
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
		position: relative;
		overflow: hidden;
	}

	.cta-button::after {
		content: '';
		position: absolute;
		top: -50%;
		left: -50%;
		width: 200%;
		height: 200%;
		background: linear-gradient(
			to right,
			rgba(255, 255, 255, 0) 0%,
			rgba(255, 255, 255, 0.3) 50%,
			rgba(255, 255, 255, 0) 100%
		);
		transform: rotate(30deg);
		animation: button-shine 3s infinite;
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	.pricing-card:hover .cta-button::after {
		opacity: 1;
	}

	.flash-sale-banner {
		animation: banner-pulse 2s infinite;
	}

	.timer-text {
		animation: timer-blink 1s infinite;
	}

	@keyframes subtle-bounce {
		0%, 100% { transform: translateY(0) scale(1.05); }
		50% { transform: translateY(-5px) scale(1.05); }
	}

	@keyframes price-pop {
		0% { transform: scale(1); }
		50% { transform: scale(1.1); }
		100% { transform: scale(1); }
	}

	@keyframes button-shine {
		0% { transform: translateX(-100%) rotate(30deg); }
		100% { transform: translateX(100%) rotate(30deg); }
	}

	@keyframes banner-pulse {
		0%, 100% { transform: scale(1); }
		50% { transform: scale(1.02); }
	}

	@keyframes timer-blink {
		0%, 100% { opacity: 1; }
		50% { opacity: 0.7; }
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		// Add 3D tilt effect to pricing cards
		const cards = document.querySelectorAll('.pricing-card');
		
		cards.forEach(card => {
			card.addEventListener('mousemove', (e) => {
				const rect = card.getBoundingClientRect();
				const x = e.clientX - rect.left;
				const y = e.clientY - rect.top;
				
				const centerX = rect.width / 2;
				const centerY = rect.height / 2;
				
				const rotateX = (y - centerY) / 20;
				const rotateY = (centerX - x) / 20;
				
				card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateY(-8px)`;
			});
			
			card.addEventListener('mouseleave', () => {
				card.style.transform = card.classList.contains('popular') ? 'scale(1.05)' : '';
			});
		});

		// Add hover effect for feature items
		const features = document.querySelectorAll('.feature-item');
		features.forEach(feature => {
			feature.addEventListener('mouseenter', () => {
				const check = feature.querySelector('.feature-check');
				if (check) {
					check.style.transform = 'scale(1.2) rotate(5deg)';
				}
			});
			
			feature.addEventListener('mouseleave', () => {
				const check = feature.querySelector('.feature-check');
				if (check) {
					check.style.transform = '';
				}
			});
		});

		// Countdown Timer Logic
		function initializeCountdown() {
			// Set end time to 24 hours from now
			const endTime = new Date();
			endTime.setHours(endTime.getHours() + 24);

			function updateTimers() {
				const now = new Date();
				const timeRemaining = Math.max(0, Math.floor((endTime - now) / 1000));

				const hours = Math.floor(timeRemaining / 3600);
				const minutes = Math.floor((timeRemaining % 3600) / 60);
				const seconds = timeRemaining % 60;

				const timeString = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;

				// Update flash sale timer
				const flashSaleTimer = document.getElementById('flash-sale-timer');
				if (flashSaleTimer) {
					flashSaleTimer.textContent = timeString;
				}

				// Update all pricing card timers
				const timerElements = document.querySelectorAll('.timer-text');
				timerElements.forEach(timer => {
					timer.textContent = `Special price ends in ${timeString}`;
				});

				if (timeRemaining <= 0) {
					clearInterval(countdownInterval);
					if (flashSaleTimer) {
						flashSaleTimer.textContent = '00:00:00';
					}
					timerElements.forEach(timer => {
						timer.textContent = 'Special price ended';
					});
				}

				return timeRemaining;
			}

			// Update immediately
			if (updateTimers() > 0) {
				// Set interval to update every second
				const countdownInterval = setInterval(() => {
					if (updateTimers() <= 0) {
						clearInterval(countdownInterval);
					}
				}, 1000);
			}
		}

		// Start the countdown
		initializeCountdown();
	});
</script> 